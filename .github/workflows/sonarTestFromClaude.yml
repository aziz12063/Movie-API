name: SonarClaude
on:
  #push:
   # branches:
    #  - CiBranche
  #pull_request:
   # branches:
    #  - CiBranche
    workflow_dispatch:
jobs:
  build:
    name: Build, test, and analyze
    runs-on: windows-latest
 
    steps:
      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: 17
          distribution: 'zulu'
          
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
         
      - name: Cache SonarCloud packages
        uses: actions/cache@v3
        with:
          path: ~\sonar\cache
          key: ${{ runner.os }}-sonar
          restore-keys: ${{ runner.os }}-sonar
          
      - name: Cache SonarCloud scanner
        id: cache-sonar-scanner
        uses: actions/cache@v3
        with:
          path: .\.sonar\scanner
          key: ${{ runner.os }}-sonar-scanner
          restore-keys: ${{ runner.os }}-sonar-scanner
          
      - name: Install SonarScanner .NET Global Tool
        if: steps.cache-sonar-scanner.outputs.cache-hit != 'true'
        shell: powershell
        run: |
          dotnet tool install --global dotnet-sonarscanner --version 5.2.4
          
      - name: Build and analyze
        env:
          GITHUB_TOKEN: ${{ secrets.MYGITHUB_TOKEN }}
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        working-directory: ./  # Specify the main project directory
        shell: powershell
        run: |
          .\.sonar\scanner\dotnet-sonarscanner begin /k:"aziz12063_Movie-API" /o:"aziz-rahimi" /d:sonar.token="${{ secrets.SONAR_TOKEN }}" /d:sonar.host.url="https://sonarcloud.io" /d:sonar.qualitygate.wait=true
          # Build the main project
          dotnet build ApiApplication/ApiApplication.csproj
          .\.sonar\scanner\dotnet-sonarscanner end /d:sonar.token="${{ secrets.SONAR_TOKEN }}"


      - name: Setup MSBuild
        uses: microsoft/setup-msbuild@v1.1

      - name: Generate Dockerfile
        run: |
          # Generate Dockerfile content
          $dockerfile = @"
          FROM mcr.microsoft.com/dotnet/sdk:6.0 AS build-env
          WORKDIR /app

          # Copy everything and build
          COPY . ./
          RUN dotnet restore
          RUN dotnet publish -c Release -o out

          # Build runtime image
          FROM mcr.microsoft.com/dotnet/aspnet:6.0
          WORKDIR /app
          COPY --from=build-env /app/out .
          ENTRYPOINT ["dotnet", "ApiApplication.dll"]
          "@
        
          # Write Dockerfile to disk
          $dockerfile | Out-File -FilePath 'Dockerfile' -Encoding utf8 -NoNewline
      
      
      - name: Build Docker image
        run: docker build -t aziz12063/movie-api-challenge:${{ github.sha }} .
      
      - name: Scan Docker image
        uses: anchore/scan-action@v3
        with:
         image: "aziz12063/movie-api-challenge:${{ github.sha }}"
         severity-cutoff: "high"
        
      - name: Docker Login
        uses: docker/login-action@v3
        with:
         username: ${{ secrets.DOCKER_USERNAME }}
         password: ${{ secrets.DOCKER_TOKEN }}
        
      - name: Push Docker image
        run: docker push aziz12063/movie-api-challenge:${{ github.sha }}




      
     
