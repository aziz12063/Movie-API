name: SonarTest
on:

  pull_request:
    branches: [CiBranche]
    
  push:
     branches: [CiBranche]
  #workflow_dispatch:

jobs:
  Build-and-analyze:
    name: Build and analyze
    runs-on: windows-latest
 
    steps:
      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: 17
          distribution: 'zulu'
          
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
          
      - name: Cache SonarCloud packages
        uses: actions/cache@v3
        with:
          path: ~\sonar\cache
          key: ${{ runner.os }}-sonar
          restore-keys: ${{ runner.os }}-sonar
          
      - name: Cache SonarCloud scanner
        id: cache-sonar-scanner
        uses: actions/cache@v3
        with:
          path: .\.sonar\scanner
          key: ${{ runner.os }}-sonar-scanner
          restore-keys: ${{ runner.os }}-sonar-scanner
          
      - name: Install SonarScanner .NET Global Tool
        if: steps.cache-sonar-scanner.outputs.cache-hit != 'true'
        shell: powershell
        run: |
          dotnet tool install --global dotnet-sonarscanner --version 5.2.4


      - name: Build and analyze
        env:
          GITHUB_TOKEN: ${{ secrets.MYGITHUB_TOKEN }}
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        working-directory: ./  # Specify the main project directory
        shell: powershell
        run: |
         
          .\.sonar\scanner\dotnet-sonarscanner begin /k:"aziz12063_Movie-API" /o:"aziz-rahimi" /d:sonar.token="${{ secrets.SONAR_TOKEN }}" /d:sonar.host.url="https://sonarcloud.io" /d:sonar.qualitygate.wait=true
          
          # Build the main project
          dotnet build ApiApplication/ApiApplication.csproj
          
          .\.sonar\scanner\dotnet-sonarscanner end /d:sonar.token="${{ secrets.SONAR_TOKEN }}"
          
 # *********************************************************************************************************************
             # *****************************DOCKER************************************
  build-and-scan:
      name: Build, Scan, and Publish ApiApplication content
      needs: Build-and-analyze
      runs-on: ubuntu-latest

      steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
          
      - name: Publish ApiApplication
        run: dotnet publish ./ApiApplication/ApiApplication.csproj -c Release -o ./publish

      - name: Create Dockerfile
        run: |
          echo "FROM mcr.microsoft.com/dotnet/aspnet:3.1 AS base" >> Dockerfile
          echo "WORKDIR /app" >> Dockerfile
          echo "COPY ./publish/ /app/" >> Dockerfile
          echo "ENTRYPOINT [\"dotnet\", \"ApiApplication.dll\"]" >> Dockerfile
        working-directory: ${{ github.workspace }}

      
      - name: Build Docker image
        run: docker build -t docker.io/aziz12063/movie-api-challenge:${{ github.sha }} .
        working-directory: ${{ github.workspace }}
        
                      # **************************************************************************************
                                #*************************SCAN ************************************************
                                
      - name: Run Trivy vulnerability scanner and create GitHub issues
        uses: knqyf263/trivy-issue-action@v0.0.6
        with:
          assignee: knqyf263
          severity: CRITICAL
          skip-dirs: integration,examples,pkg
          label: kind/security

        
                    # **************************************************************************************
                                #*************************PUSH ************************************************
                                
      - name: Login to Docker Hub
        run: docker login -u ${{ secrets.DOCKER_USERNAME }} -p ${{ secrets.DOCKER_PASSWORD }}


      - name: Push Docker image
        run: docker push docker.io/aziz12063/movie-api-challenge:${{ github.sha }}
        working-directory: ${{ github.workspace }}

         
