name: SonarTest
on:

  pull_request:
    branches: [CiBranche]
    
  push:
    branches: [CiBranche]
  

jobs:
  build:
    name: Build, test, and analyze
    runs-on: windows-latest
 
    steps:
      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: 17
          distribution: 'zulu'
          
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
          
      - name: Cache SonarCloud packages
        uses: actions/cache@v3
        with:
          path: ~\sonar\cache
          key: ${{ runner.os }}-sonar
          restore-keys: ${{ runner.os }}-sonar
          
      - name: Cache SonarCloud scanner
        id: cache-sonar-scanner
        uses: actions/cache@v3
        with:
          path: .\.sonar\scanner
          key: ${{ runner.os }}-sonar-scanner
          restore-keys: ${{ runner.os }}-sonar-scanner
          
      - name: Install SonarScanner .NET Global Tool
        if: steps.cache-sonar-scanner.outputs.cache-hit != 'true'
        shell: powershell
        run: |
          dotnet tool install --global dotnet-sonarscanner --version 5.2.4

      - name: Install coverlet.console
        run: |
          dotnet tool install --global coverlet.console --version 6.0.2
          
      - name: Install reportgenerator
        run: |
          dotnet tool install --global dotnet-reportgenerator-globaltool --version 4.8.5
          
      - name: Check if opencover.runsettings exists
        run: |
          if (-Not (Test-Path "ApiApplication/opencover.runsettings")) { echo '<?xml version="1.0" encoding="utf-8"?><RunSettings><DataCollectionRunSettings><DataCollectors><DataCollector friendlyName="XPlat Code Coverage"><Configuration><Format>opencover</Format><Exclude>[xunit.*]*</Exclude></Configuration></DataCollector></DataCollectors></DataCollectionRunSettings></RunSettings>' > ApiApplication/opencover.runsettings }
          
      - name: Generate code coverage report
        run: |
          dotnet test ApiApplication/ApiApplication.csproj --collect:"XPlat Code Coverage" --settings ApiApplication/opencover.runsettings
          reportgenerator "-reports:ApiApplication/coverage.opencover.xml" "-targetdir:coveragereport" "-reporttypes:HtmlInline_AzurePipelines"
         

        
      - name: Build and test main project
        working-directory: ./ApiApplication  # Specify the main project directory
        shell: powershell
        run: |
          # Build the main project
          dotnet build ApiApplication.csproj
          
          # Run tests with coverage for the main project
          dotnet test ApiApplication.csproj /p:CollectCoverage=true /p:CoverletOutputFormat=opencover
          
      - name: Build and test test project
        working-directory: ./ApiApplication.Test  # Specify the test project directory
        shell: powershell
        run: |
          # Build the test project
          dotnet build ApiApplication.Test.csproj
          
          # Run tests with coverage for the test project
          dotnet test ApiApplication.Test.csproj /p:CollectCoverage=true /p:CoverletOutputFormat=opencover
          
      - name: Build and analyze
        env:
          GITHUB_TOKEN: ${{ secrets.MYGITHUB_TOKEN }}
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        working-directory: ./  # Specify the main project directory
        shell: powershell
        run: |
         
          .\.sonar\scanner\dotnet-sonarscanner begin /k:"aziz12063_Movie-API" /o:"aziz-rahimi" /d:sonar.token="${{ secrets.SONAR_TOKEN }}" /d:sonar.host.url="https://sonarcloud.io" /d:sonar.qualitygate.wait=true
          
          # Build the main project
          dotnet build ApiApplication/ApiApplication.csproj
          
          .\.sonar\scanner\dotnet-sonarscanner end /d:sonar.token="${{ secrets.SONAR_TOKEN }}"
          
     # - name: Display code coverage report
      #  run: |
       #   Get-Content ./ApiApplication/coverage.opencover.xml


      # this step before using qualitygate.wait=true
     # - name: Check SonarCloud Quality Gate status
      #  id: check-quality-gate
       # env:
        #  SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        #run: |
         # $base64AuthInfo = [Convert]::ToBase64String([Text.Encoding]::ASCII.GetBytes(("${{ secrets.SONAR_TOKEN }}:")))
          #$qualityGateStatus = Invoke-RestMethod -Uri "https://sonarcloud.io/api/qualitygates/project_status?projectKey=aziz12063_Movie-API" -Headers @{Authorization=("Basic {0}" -f $base64AuthInfo)}
    
       #   if ($qualityGateStatus.projectStatus.status -eq "ERROR" -or $qualityGateStatus.projectStatus.status -eq "WARN") {
        #  Write-Host "Quality Gate failed"
         # #exit 1
          #} else {
       #   Write-Host "Good job, Quality Gate passed"
        #  }

  
      - name: Create artifact
        run: |
          # Create a zip artifact of the build output
          Compress-Archive -Path ApiApplication/bin/Release/net5.0/publish -DestinationPath ApiApplication.zip

        # Upload artifact
      - name: Upload artifact
        uses: actions/upload-artifact@v2
        with:
          name: ApiApplication
          path: ApiApplication.zip

      - name: Login to Docker registry
        run: echo "${{ secrets.DOCKER_PASSWORD }}" | docker login -u ${{ secrets.DOCKER_USERNAME }} --password-stdin

      - name: Build Docker image
        run: |
          docker build -t azizrahimi/movie-api:latest .
          docker push azizrahimi/movie-api:latest
      
        
        
