using ApiApplication.Database.Entities;
using Microsoft.EntityFrameworkCore;
using System.Collections.Generic;

namespace ApiApplication.Database
{
    public class CinemaContext : DbContext
    {
        public CinemaContext(DbContextOptions<CinemaContext> options) : base(options)
        {
            
        }


        public DbSet<AuditoriumEntity> Auditoriums { get; set; }
        public DbSet<ShowtimeEntity> Showtimes { get; set; }
        public DbSet<MovieEntity> Movies { get; set; }
        public DbSet<TicketEntity> Tickets { get; set; }
        public DbSet<SeatEntity> Seats { get; set; }

        protected override void OnModelCreating(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<AuditoriumEntity>(build =>
            {
                // Id is the primary key.
                build.HasKey(entry => entry.auditoriumId);

                // the Id is autoGenerated by the DB
                build.Property(entry => entry.auditoriumId).ValueGeneratedOnAdd();

                build.HasMany(entry => entry.Showtimes).WithOne().HasForeignKey(entity => entity.AuditoriumId);
            });

            modelBuilder.Entity<SeatEntity>(build =>
            {
                build.HasKey(entry => new { entry.AuditoriumId, entry.Row, entry.SeatNumber });


                // build.HasMany(entry => entry.Tickets).WithMany
                
                //(entry => entry.Seats).UsingEntity(j =>
                // {
                //     j.ToTable("TicketSeat"); // Name of the join table
                //     j.HasOne<SeatEntity>().WithMany().HasForeignKey("SeatId");
                //     j.HasOne<TicketEntity>().WithMany().HasForeignKey("TicketId");
                //     j.HasKey("PostsId", "TagsId");
                // });

                // one to many relationship
                build.HasOne(entry => entry.Auditorium).WithMany(entry => entry.Seats).HasForeignKey(entry => entry.AuditoriumId);
            });

            modelBuilder.Entity<ShowtimeEntity>(build =>
            {
                build.HasKey(entry => entry.showtimeId);
                build.Property(entry => entry.showtimeId).ValueGeneratedOnAdd();
                build.HasOne(entry => entry.Movie).WithMany(entry => entry.Showtimes);
                build.HasMany(entry => entry.Tickets).WithOne(entry => entry.Showtime).HasForeignKey(entry => entry.ShowtimeId);
            });

            modelBuilder.Entity<MovieEntity>(build =>
            {
                build.HasKey(entry => entry.movieIntId);
                build.Property(entry => entry.movieIntId).ValueGeneratedOnAdd();
            });

            modelBuilder.Entity<TicketEntity>(build =>
            {
                build.HasKey(entry => entry.TicketId);
                build.Property(entry => entry.TicketId).ValueGeneratedOnAdd();
            });
        }
    }
}
